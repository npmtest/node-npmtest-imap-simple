{"/home/travis/build/npmtest/node-npmtest-imap-simple/test.js":"/* istanbul instrument in package npmtest_imap_simple */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imap-simple/lib.npmtest_imap_simple.js":"/* istanbul instrument in package npmtest_imap_simple */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imap_simple = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imap_simple = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imap-simple/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imap-simple && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imap_simple */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imap_simple\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imap_simple.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_imap_simple.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imap_simple.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_imap_simple.__dirname + '/lib.npmtest_imap_simple.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imap-simple/node_modules/imap-simple/index.js":"'use strict';\n\nmodule.exports = require('./lib/imapSimple');\n","/home/travis/build/npmtest/node-npmtest-imap-simple/node_modules/imap-simple/lib/imapSimple.js":"'use strict';\nvar Imap = require('imap');\nvar Promise = require('es6-promise').Promise;\nvar nodeify = require('nodeify');\nvar getMessage = require('./helpers/getMessage');\nvar errors = require('./errors');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar qp = require('quoted-printable');\nvar iconvlite = require('iconv-lite');\nvar utf8 = require('utf8');\n\n/**\n * Constructs an instance of ImapSimple\n *\n * @param {object} imap a constructed node-imap connection\n * @constructor\n * @class ImapSimple\n */\nfunction ImapSimple(imap) {\n    var self = this;\n    self.imap = imap;\n\n    // flag to determine whether we should suppress ECONNRESET from bubbling up to listener\n    self.ending = false;\n\n    // pass most node-imap `Connection` events through 1:1\n    ['alert', 'mail', 'expunge', 'uidvalidity', 'update', 'close', 'end'].forEach(function (event) {\n        self.imap.on(event, self.emit.bind(self, event));\n    });\n\n    // special handling for `error` event\n    self.imap.on('error', function (err) {\n        // if .end() has been called and an 'ECONNRESET' error is received, don't bubble\n        if (err && self.ending && (err.code.toUpperCase() === 'ECONNRESET')) {\n            return;\n        }\n\n        self.emit('error', err);\n    });\n}\n\nutil.inherits(ImapSimple, EventEmitter);\n\n/**\n * disconnect from the imap server\n */\nImapSimple.prototype.end = function () {\n    var self = this;\n\n    // set state flag to suppress 'ECONNRESET' errors that are triggered when .end() is called.\n    // it is a known issue that has no known fix. This just temporarily ignores that error.\n    // https://github.com/mscdex/node-imap/issues/391\n    // https://github.com/mscdex/node-imap/issues/395\n    self.ending = true;\n\n    // using 'close' event to unbind ECONNRESET error handler, because the node-imap\n    // maintainer claims it is the more reliable event between 'end' and 'close'.\n    // https://github.com/mscdex/node-imap/issues/394\n    self.imap.once('close', function () {\n        self.ending = false;\n    });\n\n    self.imap.end();\n};\n\n/**\n * Open a mailbox\n *\n * @param {string} boxName The name of the box to open\n * @param {function} [callback] Optional callback, receiving signature (err, boxName)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving to `boxName`\n * @memberof ImapSimple\n */\nImapSimple.prototype.openBox = function (boxName, callback) {\n    var self = this;\n\n    if (callback) {\n        return nodeify(this.openBox(boxName), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        self.imap.openBox(boxName, function (err, result) {\n\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve(result);\n        });\n    });\n};\n\n/**\n * Search an open box, and retrieve the results\n *\n * Results are in the form:\n *\n * [{\n *   attributes: object,\n *   parts: [ { which: string, size: number, body: string }, ... ]\n * }, ...]\n *\n * See node-imap's ImapMessage signature for information about `attributes`, `which`, `size`, and `body`.\n * For any message part that is a `HEADER`, the body is automatically parsed into an object.\n *\n * @param {object} searchCriteria Criteria to use to search. Passed to node-imap's .search() 1:1\n * @param {object} fetchOptions Criteria to use to fetch the search results. Passed to node-imap's .fetch() 1:1\n * @param {function} [callback] Optional callback, receiving signature (err, results)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving to `results`\n * @memberof ImapSimple\n */\nImapSimple.prototype.search = function (searchCriteria, fetchOptions, callback) {\n    var self = this;\n\n    if (!callback && typeof fetchOptions === 'function') {\n        callback = fetchOptions;\n        fetchOptions = null;\n    }\n\n    if (callback) {\n        return nodeify(this.search(searchCriteria, fetchOptions), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        self.imap.search(searchCriteria, function (err, uids) {\n\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            if (!uids.length) {\n                resolve([]);\n                return;\n            }\n\n            var fetch = self.imap.fetch(uids, fetchOptions);\n            var messagesRetrieved = 0;\n            var messages = [];\n\n            function fetchOnMessage(message, seqNo) {\n                getMessage(message).then(function (message) {\n                    message.seqNo = seqNo;\n                    messages[seqNo] = message;\n\n                    messagesRetrieved++;\n                    if (messagesRetrieved === uids.length) {\n                        fetchCompleted();\n                    }\n                });\n            }\n\n            function fetchCompleted() {\n                // pare array down while keeping messages in order\n                var pared = messages.filter(function (m) { return !!m; });\n                resolve(pared);\n            }\n\n            function fetchOnError(err) {\n                fetch.removeListener('message', fetchOnMessage);\n                fetch.removeListener('end', fetchOnEnd);\n                reject(err);\n            }\n\n            function fetchOnEnd() {\n                fetch.removeListener('message', fetchOnMessage);\n                fetch.removeListener('error', fetchOnError);\n            }\n\n            fetch.on('message', fetchOnMessage);\n            fetch.once('error', fetchOnError);\n            fetch.once('end', fetchOnEnd);\n        });\n    });\n};\n\n/**\n * Download a \"part\" (either a portion of the message body, or an attachment)\n *\n * @param {object} message The message returned from `search()`\n * @param {object} part The message part to be downloaded, from the `message.attributes.struct` Array\n * @param {function} [callback] Optional callback, receiving signature (err, data)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving to `data`\n * @memberof ImapSimple\n */\nImapSimple.prototype.getPartData = function (message, part, callback) {\n    var self = this;\n\n    if (callback) {\n        return nodeify(self.getPartData(message, part), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n        var fetch = self.imap.fetch(message.attributes.uid, {\n            bodies: [part.partID],\n            struct: true\n        });\n\n        function fetchOnMessage(msg) {\n            getMessage(msg).then(function (result) {\n                if (result.parts.length !== 1) {\n                    reject(new Error('Got ' + result.parts.length + ' parts, should get 1'));\n                    return;\n                }\n\n                var data = result.parts[0].body;\n\n                var encoding = part.encoding.toUpperCase();\n\n                if (encoding === 'BASE64') {\n                    resolve(new Buffer(data, 'base64'));\n                    return;\n                }\n\n                if (encoding === 'QUOTED-PRINTABLE') {\n                    if (part.params && part.params.charset &&\n                        part.params.charset.toUpperCase() === 'UTF-8') {\n                        resolve((new Buffer(utf8.decode(qp.decode(data)))).toString());\n                    } else {\n                        resolve((new Buffer(qp.decode(data))).toString());\n                    }\n                    return;\n                }\n\n                if (encoding === '7BIT') {\n                    resolve((new Buffer(data)).toString('ascii'));\n                    return;\n                }\n\n                if (encoding === '8BIT' || encoding === 'BINARY') {\n                    var charset = (part.params && part.params.charset) || 'utf-8';\n                    resolve(iconvlite.decode(new Buffer(data), charset));\n                    return;\n                }\n\n                // if it gets here, the encoding is not currently supported\n                reject(new Error('Unknown encoding ' + part.encoding));\n            });\n        }\n\n        function fetchOnError(err) {\n            fetch.removeListener('message', fetchOnMessage);\n            fetch.removeListener('end', fetchOnEnd);\n            reject(err);\n        }\n\n        function fetchOnEnd() {\n            fetch.removeListener('message', fetchOnMessage);\n            fetch.removeListener('error', fetchOnError);\n        }\n\n        fetch.once('message', fetchOnMessage);\n        fetch.once('error', fetchOnError);\n        fetch.once('end', fetchOnEnd);\n    });\n};\n\n/**\n * Moves the specified message(s) in the currently open mailbox to another mailbox.\n *\n * @param {string|Array} source The node-imap `MessageSource` indicating the message(s) from the current open mailbox\n *  to move.\n * @param {string} boxName The mailbox to move the message(s) to.\n * @param {function} [callback] Optional callback, receiving signature (err)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving when the action succeeds.\n * @memberof ImapSimple\n */\nImapSimple.prototype.moveMessage = function (source, boxName, callback) {\n    var self = this;\n\n    if (callback) {\n        return nodeify(self.moveMessage(source, boxName), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n        self.imap.move(source, boxName, function (err) {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve();\n        });\n    });\n};\n\n/**\n * Adds the provided label(s) to the specified message(s).\n *\n * This is a Gmail extension method (X-GM-EXT-1)\n *\n * @param {string|Array} source The node-imap `MessageSource` indicating the message(s) to add the label(s) to.\n * @param {string|Array} labels Either a single string or an array of strings indicating the labels to add to the\n *  message(s).\n * @param {function} [callback] Optional callback, receiving signature (err)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving when the action succeeds.\n * @memberof ImapSimple\n */\nImapSimple.prototype.addMessageLabel = function (source, labels, callback) {\n    var self = this;\n\n    if (callback) {\n        return nodeify(self.addMessageLabel(source, labels), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n        self.imap.addLabels(source, labels, function (err) {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve();\n        });\n    });\n};\n\n/**\n * Adds the provided flag(s) to the specified message(s).\n *\n * @param {string|Array} uid The messages uid\n * @param {string|Array} flags Either a single string or an array of strings indicating the flags to add to the\n *  message(s).\n * @param {function} [callback] Optional callback, receiving signature (err)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving when the action succeeds.\n * @memberof ImapSimple\n */\nImapSimple.prototype.addFlags = function (uid, flags, callback) {\n    var self = this;\n\n    if (callback) {\n        return nodeify(self.addFlags(uid, flags), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n        self.imap.addFlags(uid, flags, function (err) {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve();\n        });\n    });\n};\n\n/**\n * Removes the provided flag(s) to the specified message(s).\n *\n * @param {string|Array} uid The messages uid\n * @param {string|Array} flags Either a single string or an array of strings indicating the flags to remove from the\n *  message(s).\n * @param {function} [callback] Optional callback, receiving signature (err)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving when the action succeeds.\n * @memberof ImapSimple\n */\nImapSimple.prototype.delFlags = function (uid, flags, callback) {\n    var self = this;\n\n    if (callback) {\n        return nodeify(self.delFlags(uid, flags), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n        self.imap.delFlags(uid, flags, function (err) {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            resolve();\n        });\n    });\n};\n\n/**\n * Connect to an Imap server, returning an ImapSimple instance, which is a wrapper over node-imap to\n * simplify it's api for common use cases.\n *\n * @param {object} options\n * @param {object} options.imap Options to pass to node-imap constructor 1:1\n * @param {function} [callback] Optional callback, receiving signature (err, connection)\n * @returns {undefined|Promise} Returns a promise when no callback is specified, resolving to `connection`\n */\nfunction connect(options, callback) {\n    options = options || {};\n    options.imap = options.imap || {};\n\n    // support old connectTimeout config option. Remove in v2.0.0\n    if (options.hasOwnProperty('connectTimeout')) {\n        console.warn('[imap-simple] connect: options.connectTimeout is deprecated. ' +\n            'Please use options.imap.authTimeout instead.');\n        options.imap.authTimeout = options.connectTimeout;\n    }\n\n    // set default authTimeout\n    options.imap.authTimeout = options.imap.hasOwnProperty('authTimeout') ? options.imap.authTimeout : 2000;\n\n    if (callback) {\n        return nodeify(connect(options), callback);\n    }\n\n    return new Promise(function (resolve, reject) {\n        var imap = new Imap(options.imap);\n\n        function imapOnReady() {\n            imap.removeListener('error', imapOnError);\n            imap.removeListener('close', imapOnClose);\n            imap.removeListener('end', imapOnEnd);\n            resolve(new ImapSimple(imap));\n        }\n\n        function imapOnError(err) {\n            if (err.source === 'timeout-auth') {\n                err = new errors.ConnectionTimeoutError(options.imap.authTimeout);\n            }\n\n            imap.removeListener('ready', imapOnReady);\n            imap.removeListener('close', imapOnClose);\n            imap.removeListener('end', imapOnEnd);\n            reject(err);\n        }\n\n        function imapOnEnd() {\n            imap.removeListener('ready', imapOnReady);\n            imap.removeListener('error', imapOnError);\n            imap.removeListener('close', imapOnClose);\n            reject(new Error('Connection ended unexpectedly'));\n        }\n\n        function imapOnClose() {\n            imap.removeListener('ready', imapOnReady);\n            imap.removeListener('error', imapOnError);\n            imap.removeListener('end', imapOnEnd);\n            reject(new Error('Connection closed unexpectedly'));\n        }\n\n        imap.once('ready', imapOnReady);\n        imap.once('error', imapOnError);\n        imap.once('close', imapOnClose);\n        imap.once('end', imapOnEnd);\n\n        if (options.hasOwnProperty('onmail')) {\n            imap.on('mail', options.onmail);\n        }\n\n        if (options.hasOwnProperty('onexpunge')) {\n            imap.on('expunge', options.onexpunge);\n        }\n\n        if (options.hasOwnProperty('onupdate')) {\n            imap.on('update', options.onupdate);\n        }\n\n        imap.connect();\n    });\n}\n\n/**\n * Given the `message.attributes.struct`, retrieve a flattened array of `parts` objects that describe the structure of\n * the different parts of the message's body. Useful for getting a simple list to iterate for the purposes of,\n * for example, finding all attachments.\n *\n * Code taken from http://stackoverflow.com/questions/25247207/how-to-read-and-save-attachments-using-node-imap\n *\n * @param {Array} struct The `message.attributes.struct` value from the message you wish to retrieve parts for.\n * @param {Array} [parts] The list of parts to push to.\n * @returns {Array} a flattened array of `parts` objects that describe the structure of the different parts of the\n *  message's body\n */\nfunction getParts(struct, parts) {\n    parts = parts || [];\n    for (var i = 0; i < struct.length; i++) {\n        if (Array.isArray(struct[i])) {\n            getParts(struct[i], parts);\n        } else if (struct[i].partID) {\n            parts.push(struct[i]);\n        }\n    }\n    return parts;\n}\n\nmodule.exports = {\n    connect: connect,\n    ImapSimple: ImapSimple,\n    parseHeader: Imap.parseHeader,\n    getParts: getParts,\n    errors: errors\n};\n","/home/travis/build/npmtest/node-npmtest-imap-simple/node_modules/imap-simple/lib/helpers/getMessage.js":"'use strict';\nvar Promise = require('es6-promise').Promise;\nvar Imap = require('imap');\n\n/**\n * Given an 'ImapMessage' from the node-imap library,\n * retrieves the message formatted as:\n *\n * {\n *   attributes: object,\n *   parts: [ { which: string, size: number, body: string }, ... ]\n * }\n *\n * @param {object} message an ImapMessage from the node-imap library\n * @returns {Promise} a promise resolving to `message` with schema as described above\n */\nmodule.exports = function getMessage(message) {\n    return new Promise(function (resolve) {\n        var attributes;\n        var messageParts = [];\n        var isHeader = /^HEADER/g;\n\n        function messageOnBody(stream, info) {\n            var body = '';\n\n            function streamOnData(chunk) {\n                body += chunk.toString('utf8');\n            }\n\n            stream.on('data', streamOnData);\n\n            stream.once('end', function streamOnEnd() {\n                stream.removeListener('data', streamOnData);\n\n                var part = {\n                    which: info.which,\n                    size: info.size,\n                    body: body\n                };\n\n                if (isHeader.test(part.which)) {\n                    part.body = Imap.parseHeader(part.body);\n                }\n\n                messageParts.push(part);\n            });\n        }\n\n        function messageOnAttributes(attrs) {\n            attributes = attrs;\n        }\n\n        function messageOnEnd() {\n            message.removeListener('body', messageOnBody);\n            message.removeListener('attributes', messageOnAttributes);\n            resolve({\n                attributes: attributes,\n                parts: messageParts\n            });\n        }\n\n        message.on('body', messageOnBody);\n        message.once('attributes', messageOnAttributes);\n        message.once('end', messageOnEnd);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-imap-simple/node_modules/imap-simple/lib/errors.js":"'use strict';\nvar util = require('util');\n\n/**\n * Error thrown when a connection attempt has timed out\n *\n * @param {number} timeout timeout in milliseconds that the connection waited before timing out\n * @constructor\n */\nfunction ConnectionTimeoutError(timeout) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.message = 'connection timed out';\n\n    if (timeout) {\n        this.message += '. timeout = ' + timeout + ' ms';\n    }\n\n    this.name = 'ConnectionTimeoutError';\n}\n\nutil.inherits(ConnectionTimeoutError, Error);\n\nexports.ConnectionTimeoutError = ConnectionTimeoutError;\n"}